{"ast":null,"code":"var _jsxFileName = \"/home/uri/\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/Ex2/Chat-Application/src/ChatScreen/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBox(_ref) {\n  _s();\n  let {\n    chat,\n    user,\n    selectedContact,\n    setChat,\n    updateChatMessages\n  } = _ref;\n  const [chatMessages, setChatMessages] = useState({});\n  const messagesContainerRef = useRef(null);\n  const messages = chat ? chat.messages || [] : [];\n  const msgIdCounter = useRef(1);\n  useEffect(() => {\n    if (chat) {\n      setChatMessages(prevMessages => ({\n        ...prevMessages,\n        [chat.id]: {\n          messages: chat.messages || []\n        }\n      }));\n    }\n  }, [chat]);\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n  const formatDateTime = dateTime => {\n    const options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      hour12: false\n    };\n    return dateTime.toLocaleString(\"en-US\", options);\n  };\n  const handleSendMessage = messageText => {\n    if (chat) {\n      const newMessage = {\n        id: msgIdCounter.current++,\n        content: messageText,\n        time: formatDateTime(new Date()),\n        sender: user\n      };\n      const updatedMessages = [...(chat.messages || []), newMessage];\n      const updatedChat = {\n        ...chat,\n        messages: updatedMessages,\n        lastMessage: messageText\n      };\n      setChatMessages(prevMessages => ({\n        ...prevMessages,\n        [chat.id]: {\n          messages: updatedMessages,\n          lastMessage: messageText\n        }\n      }));\n      updateChatMessages(chat.id, updatedMessages);\n      setChat(updatedChat);\n      console.log(updatedChat.lastMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat_window\",\n    children: [selectedContact && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        pic: selectedContact.profilePic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username\",\n        children: selectedContact.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ChatButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      ref: messagesContainerRef,\n      children: messages.slice().reverse().map((message, index) => {\n        return /*#__PURE__*/_jsxDEV(Message, {\n          text: message.content,\n          time: message.time,\n          incoming: 0\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      onSendMessage: handleSendMessage,\n      selectedContact: selectedContact ? selectedContact.username : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"us0R/jB58CybxggJygD5xt8NTCY=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfilePic","ChatButtons","Message","SendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","_ref","_s","chat","user","selectedContact","setChat","updateChatMessages","chatMessages","setChatMessages","messagesContainerRef","messages","msgIdCounter","prevMessages","id","container","current","scrollTop","scrollHeight","formatDateTime","dateTime","options","year","month","day","hour","minute","second","hour12","toLocaleString","handleSendMessage","messageText","newMessage","content","time","Date","sender","updatedMessages","updatedChat","lastMessage","console","log","children","pic","profilePic","fileName","_jsxFileName","lineNumber","columnNumber","className","displayName","ref","slice","reverse","map","message","index","text","incoming","onSendMessage","username","_c","$RefreshReg$"],"sources":["/home/uri/שולחן העבודה/Ex2/Chat-Application/src/ChatScreen/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\n\nfunction ChatBox({chat, user, selectedContact, setChat, updateChatMessages }) {\n  const [chatMessages, setChatMessages] = useState({});\n  const messagesContainerRef = useRef(null);\n  const messages = chat ? chat.messages || [] : [];\n  const msgIdCounter = useRef(1);\n\n  useEffect(() => {\n    if (chat) {\n      setChatMessages((prevMessages) => ({\n        ...prevMessages,\n        [chat.id]: {\n          messages: chat.messages || [],\n        },\n      }));\n    }\n  }, [chat]);\n  \n\n\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n\n  const formatDateTime = (dateTime) => {\n    const options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",   \n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      hour12: false,\n    };\n    return dateTime.toLocaleString(\"en-US\", options);\n  };\n\n  const handleSendMessage = (messageText) => {\n    if (chat) {\n      const newMessage = {\n        id: msgIdCounter.current++,\n        content: messageText,\n        time: formatDateTime(new Date()),\n        sender: user\n      };\n  \n      const updatedMessages = [\n        ...(chat.messages || []),\n        newMessage,\n      ];\n  \n      const updatedChat = {\n        ...chat,\n        messages: updatedMessages,\n        lastMessage: messageText\n      };\n  \n      setChatMessages((prevMessages) => ({\n        ...prevMessages,\n        [chat.id]: {\n          messages: updatedMessages,\n          lastMessage: messageText\n        },\n      }));\n      updateChatMessages(chat.id, updatedMessages);\n      setChat(updatedChat);\n      console.log(updatedChat.lastMessage);\n    }\n  };\n\n  return (\n    <div id=\"chat_window\">\n      {selectedContact && (\n        <>\n          <ProfilePic pic={selectedContact.profilePic}/>\n          <span className=\"username\">{selectedContact.displayName}</span>\n        </>\n      )}\n      <ChatButtons />\n      <div id=\"messages\" ref={messagesContainerRef}>\n      {messages.slice().reverse().map((message, index) => {\n        return (\n            <Message\n            key={index}\n            text={message.content}\n            time={message.time}\n            incoming={0}\n            />\n        );\n        })}\n      </div>\n      <SendMessage\n        onSendMessage={handleSendMessage}\n        selectedContact={selectedContact ? selectedContact.username : null}\n      />\n    </div>\n  );\n}\n\nexport default ChatBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}